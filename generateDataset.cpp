/*
The MIT License

Copyright (c) 2013 Kosuke Imai kimai@princeton.edu,
                   Radhika S. Saksena radhika.saksena@gmail.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
#include <iostream>
#include <cmath>
#include <boost/random.hpp>
#include <time.h>
#include <sstream>
#include <fstream>
#include <boost/math/distributions/normal.hpp>
#include <boost/random/linear_congruential.hpp>
#include <boost/random/uniform_int.hpp>
#include <boost/random/uniform_real.hpp>
#include <boost/random/variate_generator.hpp>
//#include "armadillo"

using namespace std;
using namespace boost; 
//using namespace arma;

typedef boost::minstd_rand base_generator_type; 

int main(int argc, char** argv){
    //int numProdsK = 10;
    //int numDyads = 90;
    
    //int numProdsK = 50;
    //int numDyads = 50*49;

    int numProdsK = 771;
    //int numProdsK = 100;
    //int numDyads = 400;
    //int numDyads = 1000;
    //int numDyads = 2000;
    int numDyads = 10000;
    //int numDyads = 20000;
    //int numDyads = 100*99;
    
    int numModelsM = 3;
    int numProdsK2;

    mt19937 generator;
    generator.seed(time(0));
    //normal_distribution<> norm_dist(0.5,0.25);
    
    //mu[0][k] will be normally distributed around 2.0
    //mu[1][k] will be normally distributed around 10.0
    //mu[2][k] will be normally distributed around 15.0
    //all three have variance 1.0
   
    normal_distribution<> norm_dist0(2.0,1.0);
    normal_distribution<> norm_dist1(10.0,1.0);
    normal_distribution<> norm_dist2(15.0,1.0);

    //variate_generator<mt19937&,normal_distribution<> >  norm_rnd(generator,norm_dist);
    variate_generator<mt19937&,normal_distribution<> >  norm_rnd0(generator,norm_dist0);
    variate_generator<mt19937&,normal_distribution<> >  norm_rnd1(generator,norm_dist1);
    variate_generator<mt19937&,normal_distribution<> >  norm_rnd2(generator,norm_dist2);

    //generator for the uniform distribution of q
    base_generator_type generatorb(42u);
    boost::uniform_real<> uni_dist(0,1);
    boost::variate_generator<base_generator_type&,boost::uniform_real<> > uni(generatorb,uni_dist);

    numProdsK2 = 2*(numProdsK-1);

    //qstar goes from 1,....,K-1,K,....,2*(K-1)
    //q goes from 1....K,K+1,.....,2*K
    vector<vector<double> > q;
    vector<vector<double> > qstar;
    vector<vector<double> > y;

    y.resize(numDyads);
    for(int i = 0; i < numDyads; i++){
        y[i].resize(numProdsK2);
    }

    q.resize(numModelsM);
    qstar.resize(numModelsM);
    for(int z = 0; z < numModelsM; z++){
        q[z].resize(2*numProdsK);
        qstar[z].resize(numProdsK2); 
    }

    //the first value generated by the uniform distribution generator was weird 
    uni();
    //qstar goes from 1,....,K-1,K,....,2*(K-1)
    //q goes from 1....K,K+1,.....,2*K
    for(int z = 0; z < numModelsM; z++){
        for(int k = 0; k < numProdsK-1;k++){
            //qstar[z][k] = 0.1*(z+1) + uni()/10.0;
            qstar[z][k] = uni();
            q[z][k] = qstar[z][k];
        }
        q[z][numProdsK - 1] = 1.0; 

        for(int k = numProdsK-1; k < 2*numProdsK-2; k++){
            //qstar[z][k] = 0.1*(z+1) + uni()/10.0;
            qstar[z][k] = uni();
            q[z][k+1] = qstar[z][k];
        }
        q[z][2*numProdsK - 1] = 1.0; 
    }


#if 0
    //dyads that belong to cluster 0 
    for(int i = 0; i < numDyads/2; i++){
        for(int k = 0; k < numProdsK2; k++){
            if(uni() < qstar[0][k]){
                    y[i][k] = 0;
            }
            else{
                y[i][k] = norm_rnd0();
            }
        }
    }

    //dyads that belong to cluster 1 
    for(int i = numDyads/2; i < numDyads; i++){
        for(int k = 0; k < numProdsK2; k++){
            if(uni() < qstar[1][k]){
                    y[i][k] = 0;
            }
            else{
                y[i][k] = norm_rnd1();
            }
        }
    }
#endif

    //dyads that belong to cluster 0 
    for(int i = 0; i < numDyads/3; i++){
        for(int k = 0; k < numProdsK2; k++){
            int z=0;
            if(uni() < qstar[z][k]){
                    y[i][k] = 0;
            }
            else{
                y[i][k] = norm_rnd0();
            }
        }
    }

    //dyads that belong to cluster 1 
    for(int i = numDyads/3; i < (2*numDyads)/3; i++){
        for(int k = 0; k < numProdsK2; k++){
            int z=1; 
            if(uni() < qstar[z][k]){
                    y[i][k] = 0;
            }
            else{
                y[i][k] = norm_rnd1();
            }
        }
    }

    //dyads that belong to cluster 2 
    for(int i = (2*numDyads)/3; i < numDyads; i++){
        for(int k = 0; k < numProdsK2; k++){
            int z=2;
            if(uni() < qstar[z][k]){
                    y[i][k] = 0;
            }
            else{
                y[i][k] = norm_rnd2();
            }
        }
    }

    ofstream ofile;
    ofile.open("test.txt");
    for(int z = 0; z < numModelsM; z++){
        for(int k = 0; k < 2*numProdsK; k++){
            //ofile<<"q["<<z<<"]["<<k<<"]="<<q[z][k]<<endl;
            ofile<<q[z][k]<<endl;
        }
    }

#if 0
    for(int z= 0; z < numModelsM; z++){
        for(int k = 0; k < numProdsK2; k++){
            ofile<<"qstar["<<z<<"]["<<k<<"]="<<qstar[z][k]<<endl;
        } 
    }
#endif

    for(int i = 0; i < numDyads; i++){
        for(int k = 0; k < numProdsK2; k++){
            ofile<<y[i][k]<<"\t";
        }
        ofile<<endl;
    }
    ofile.close();

    return 1;
}
